const API_URL = "http://localhost:5001/api"; // backend API URL


/**
 * Creates a server request using the API URL and the endpoint passed into the function
 * Gets the data generated by the request response and returns it
 */
async function request(endpoint, options = {}) {
    const res = await fetch (`${API_URL}${endpoint}`, {
        ...options,
        headers: {
            "Content-Type": "application/json",
            ...(options.headers || {})
        },
    })

    const data = await res.json();

    if (!res.ok) {
        throw new Error (data.message || "API request failed");
    }

    return data;
}


/**
 * Calls the GET /api/users/current route
 * Returns the current user using the token passed into the function
 */
function currentUser(token) {
    return request("/users/current", {
        method: "GET",
        headers: {
            "Authorization": `Bearer ${token}`
        }
    });
}


/**
 * Calls the POST /api/users/register route
 * Returns the user that was registered using the username and password string values passed into the function
 */
function register(username, password) {
    return request("/users/register", {
        method: "POST",
        body: JSON.stringify({username, password})
    });
}


/**
 * Calls the POST /api/users/login route
 * Returns the user that was logged in using the username and password string values passed into the function
 */
function login(username, password) {
    return request("/users/login", {
        method: "POST",
        body: JSON.stringify({username, password})
    });
}

/**
 * Calls the GET /api/decks route
 * Returns the decks associated with the logged-in user using the token passed into the function
 */
function getDecks(token) {
    return request("/decks", {
        method: "GET",
        headers: {
            "Authorization": `Bearer ${token}`
        }
    });
}

/**
 * Calls the GET /api/decks/:id route
 * Returns the specific deck associated with the deck ID passed into the function
 */
function getDeckById(deckId) {
    return request(`/decks/${deckId}`, {
        method: "GET"
    });
}

/**
 * Calls the POST /api/decks route
 * Returns the newly-created deck using the deck name, description, and user token passed into the function
 */
function createDeck(name, token) {
    return request("/decks", {
        method: "POST",
        body: JSON.stringify({name}),
        headers: {
            "Authorization": `Bearer ${token}`
        }
    });
}


/**
 * Calls the PUT /api/decks/:id route
 * Returns the updated deck using the deck name, description, and user token passed into the function
 */
function updateDeck(name, deckId, token) {
    return request(`/decks/${deckId}`, {
        method: "PUT",
        body: JSON.stringify({name}),
        headers: {
            "Authorization": `Bearer ${token}`
        }
    });
}


/**
 * Calls the DELETE /api/decks/:id route
 * Returns the deleted deck using the deckId and user token passed into the function
 */
function deleteDeck(deckId, token) {
    return request(`/decks/${deckId}`, {
        method: "DELETE",
        headers: {
            "Authorization": `Bearer ${token}`
        }
    });
}


/**
 * Calls the GET /api/flashcards/:id route
 * Returns all decks associated with a deck using the deckId parameter passed into the function
 */
function getCards(deckId) {
    return request(`/flashcards/${deckId}`, {
        method: "GET"
    });
}


/**
 * Calls the POST /api/flashcards/:id route
 * Returns a newly created card using the card's term, definition, deck ID, and user token passed into the function
 */
function createCard(term, definition, deckId, token) {
    return request(`/flashcards/${deckId}`, {
        method: "POST",
        body: JSON.stringify({term, definition}),
        headers: {
            "Authorization": `Bearer ${token}`
        }
    });
}


/**
 * Calls the PUT /api/flashcards/:id route
 * Returns the updated card using the card's new term, definition, card ID, and user token passed into the function
 */
function updateCard(term, definition, cardId, token) {
    return request(`/flashcards/${cardId}`, {
        method: "PUT",
        body: JSON.stringify({term, definition}),
        headers: {
            "Authorization": `Bearer ${token}`
        }
    });
}


/**
 * Calls the DELETE /api/flashcards/:id route
 * Returns the deleted card using the card's ID and user token passed into the function
 */
function deleteCard(cardId, token) {
    return request(`/flashcards/${cardId}`, {
        method: "DELETE",
        headers: {
            "Authorization": `Bearer ${token}`
        }
    });
}

// Exports all API functions that use request()
export {
    currentUser,
    login,
    register,
    getDecks,
    getDeckById,
    createDeck,
    updateDeck,
    deleteDeck,
    getCards,
    createCard,
    updateCard,
    deleteCard
};